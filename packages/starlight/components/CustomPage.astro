---
// Important that this is the first import so it can override cascade layers order.
import 'virtual:starlight/user-css';

// Starlight nested cascade layers definitions which specify the default order of internal layers.
import '../style/layers.css';

// Built-in CSS styles.
import '../style/props.css';
import '../style/reset.css';
import '../style/asides.css';
import '../style/util.css';
import 'virtual:starlight/optional-css';

import Banner from 'virtual:starlight/components/Banner';
import ContentPanel from 'virtual:starlight/components/ContentPanel';
import FallbackContentNotice from 'virtual:starlight/components/FallbackContentNotice';
import DraftContentNotice from 'virtual:starlight/components/DraftContentNotice';
import Footer from 'virtual:starlight/components/Footer';
import Head from 'virtual:starlight/components/Head';
import Header from 'virtual:starlight/components/Header';
import Hero from 'virtual:starlight/components/Hero';
import MarkdownContent from 'virtual:starlight/components/MarkdownContent';
import PageFrame from 'virtual:starlight/components/PageFrame';
import PageSidebar from 'virtual:starlight/components/PageSidebar';
import PageTitle from 'virtual:starlight/components/PageTitle';
import Sidebar from 'virtual:starlight/components/Sidebar';
import SkipLink from 'virtual:starlight/components/SkipLink';
import ThemeProvider from 'virtual:starlight/components/ThemeProvider';
import TwoColumnContent from 'virtual:starlight/components/TwoColumnContent';
import { Steps, Code, FileTree } from '../components';

import printHref from '../style/print.css?url&no-inline';

const { starlightRoute } = Astro.locals;
import type { CollectionEntry } from 'astro:content';
// const entry: CollectionEntry<'pages'> = starlightRoute.entry;
// console.log('entry: ', entry);
// const blocks = starlightRoute.entry.data?.blocks ?? [];

const pagefindEnabled =
	starlightRoute.entry.slug !== '404' &&
	!starlightRoute.entry.slug.endsWith('/404') &&
	starlightRoute.entry.data.pagefind !== false;

const htmlDataAttributes: DOMStringMap = { 'data-theme': 'dark' };
if (Boolean(starlightRoute.toc)) htmlDataAttributes['data-has-toc'] = '';
if (starlightRoute.hasSidebes'> = starlightRoute.entry;
// console.log('entry: ', entry);
const blocks = starligar) htmlDataAttributes['data-has-sidebar'] = '';
if (Boolean(starlightRoute.entry.data.hero)) htmlDataAttributes['data-has-hero'] = '';

const mainDataAttributes: DOMStringMap = {};
if (pagefindEnabled) mainDataAttributes['data-pagefind-body'] = '';

import { RenderTree } from '../src/lib/renderTree.tsx';
import { parseIndentedTree } from '../src/lib/parseIndentedTree.ts';
// import PreactMarkdown from '../src/lib/PreactMarkdown.tsx';
import AstroMarkdown from '../src/lib/AstroMarkdown.astro';

---

<html lang={starlightRoute.lang} dir={starlightRoute.dir} {...htmlDataAttributes}>
	<head>
		<Head />
		<style>
			html:not([data-has-toc]) {
				--sl-mobile-toc-height: 0rem;
			}
			html:not([data-has-sidebar]) {
				--sl-content-width: 67.5rem;
			}
			/* Add scroll padding to ensure anchor headings aren't obscured by nav */
			html {
				/* Additional padding is needed to account for the mobile TOC */
				scroll-padding-top: calc(1.5rem + var(--sl-nav-height) + var(--sl-mobile-toc-height));
			}
			main {
				padding-bottom: 3vh;
			}
			@media (min-width: 50em) {
				[data-has-sidebar] {
					--sl-content-inline-start: var(--sl-sidebar-width);
				}
			}
			@media (min-width: 72em) {
				html {
					scroll-padding-top: calc(1.5rem + var(--sl-nav-height));
				}
			}
		</style>
		<ThemeProvider />
		<link rel="stylesheet" href={printHref} media="print" />
	</head>
	<body>
		<SkipLink />
		<PageFrame>
			<Header slot="header" />
			{starlightRoute.hasSidebar && <Sidebar slot="sidebar" />}
			<script src="./SidebarPersistState"></script>
			<TwoColumnContent>
				<PageSidebar slot="right-sidebar" />
				<main
					{...mainDataAttributes}
					lang={starlightRoute.entryMeta.lang}
					dir={starlightRoute.entryMeta.dir}
				>
					{/* TODO: Revisit how this logic flows. */}
					<Banner />
					{
						starlightRoute.entry.data.hero ? (
							<ContentPanel>
								<Hero />
								<MarkdownContent>
									<slot />
								</MarkdownContent>
								<Footer />
							</ContentPanel>
						) : (
							<>
								<ContentPanel>
									<PageTitle />
									{starlightRoute.entry.data.draft && <DraftContentNotice />}
									{starlightRoute.isFallback && <FallbackContentNotice />}
								</ContentPanel>
								<!-- <ContentPanel>{mergeRteBlocks(entry)}</ContentPanel> -->
								<ContentPanel>
									{starlightRoute.entry.data.blocks ? (
										starlightRoute.entry.data.blocks.map((block) => {
											switch (block.type) {
												case 'rte':
													// console.log('block:', block);
													return (
														<MarkdownContent>
															<AstroMarkdown content={block.content} />
														</MarkdownContent>
													);
												case 'code':
													console.log('block:', block);
													return <Code {...block} />;
												case 'steps':
													console.log('block:', block);
													return (
														<Steps title="Installation Steps">
    														<ol>
                                                                {block.steps.map((step, index) => (
                                                                    <li key={index}>
                                                                        <h4>{step.title}</h4>
                                                                        <p>{step.content}</p>
                                                                        {step.code && <Code code={step.code} lang={step.lang} />}
                                                                        {step.filetree && (
                                                                            <FileTree>
                                                                                <RenderTree tree={parseIndentedTree(step.filetree?.tree)} />
                                                                            </FileTree>
                                                                        )}
                                                                    </li>
                                                                ))}
                                                            </ol>
														</Steps>
													);
												case 'filetree':
													// const parsedTree = parseIndentedTree(block.tree);
													// <ul>{renderTree(parsedTree)}</ul>
													// <FileTree title={block.title}></FileTree>
													// <FileTree>{renderTree(parseIndentedTree(block.tree))}</FileTree>
													//
													// <FileTree>{indentToMarkdownList(block.tree)}</FileTree>
													//
													//

													// console.log(JSON.stringify(parseIndentedTree(block.tree), null, 2));
													// {debugIndentation(block.tree)}
													// console.log('block:', block);

													return (
														<div>
															<FileTree>
																<RenderTree tree={parseIndentedTree(block.tree)} />
															</FileTree>
														</div>
													);

												default:
													return null;
											}
										})
									) : (
										<MarkdownContent>
											<slot />
										</MarkdownContent>
									)}
									<Footer />
								</ContentPanel>
							</>
						)
					}
				</main>
			</TwoColumnContent>
		</PageFrame>
	</body>
</html>
